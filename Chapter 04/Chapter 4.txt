//Example 4.1
list = [1,2,3,4,"string",'c']
list
list[3]
list.append(“test")
list

//Example 4.2
dict={1:"a",2:"b"}
dict
dict[2]
dict[1] = "c"
dict
dict[3] = "d"
dict
dict[4] = 1
dict

//Example 4.3
tuple = (1,2,3,"string","a")
tuple
tuple[3]
new_tuple = tuple+([1,2,3,"string","a"],"test")
new_tuple
new_tuple[5][2] = 7
new_tuple

//Example 4.4
set = {1,2,3,”string","a"}
set
set.add("test")
set
set[4]
set1 = {1,2,3,4,5}
set1
set.union(set1)

//Example 4.5
import array as arr
a = arr.array('i',[1,2,3])
a
b = arr.array('d',[1.5,2,3])
b
a[2]
b[0]
a.insert(1,4)
a
b.insert(2,5)
b

//Example 4.6
stack = []
stack
stack.append(1)
stack.append(2)
stack.append(3)
stack
stack.pop()
stack
stack[1]

//Example 4.7
queue = []
queue
queue.append(1)
queue.append(2)
queue.append(3)
queue
queue.pop(0)
queue
queue[1]

//Exmaple 4.8
class Node: 
    def __init__(self, key): 
        self.left = None
        self.right = None
        self.val = key 

root = Node(1)   
root.left      = Node(2); 
root.right     = Node(3); 
root.left.left  = Node(4);

//Example 4.9
class Node: 
    def __init__(self, data): 
        self.data = data
        self.next = None

class LinkedList: 
    def __init__(self): 
        self.head = None

list = LinkedList() 
list.head = Node(1) 
second = Node(2) 
third = Node(3) 
list.head.next = second;
second.next = third;

//Example 4.10
from collections import defaultdict
graph = defaultdict()
graph[1]=[2, 4]
graph[2]=[1,3, 4]
graph[3]=[2]
graph[4]=[1,2]
graph

//Example 4.11
class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class HashMap:
    def __init__(self):
        self.store = [None for _ in range(16)]
    def get(self, key):
        index = hash(key) & 15
        if self.store[index] is None:
            return None
        n = self.store[index]
        while True:
            if n.key == key:
                return n.value
            else:
                if n.next:
                    n = n.next
                else:
                    return None
    def put(self, key, value):
        nd = Node(key, value)
        index = hash(key) & 15
        n = self.store[index]
        if n is None:
            self.store[index] = nd
        else:
            if n.key == key:
                n.value = value
            else:
                while n.next:
                    if n.key == key:
                        n.value = value
                        return
                    else:
                        n = n.next
	            n.next = nd

