//Example 12.1
class Node():
     def __init__(self,val):
         self.val = val
         self.child = []
     def add_child(self, node):
         self.child.append(node)

//Example 12.2
root = Node(1)
root
root.child
child1 = Node(2)
child2 = Node(3)
root.add_child(child1)
root.add_child(child2)
root.child
for c in root.child:
     print(c.val)

root.val

//Example 12.3
pip install anytree
from anytree import Node, RenderTree
node1 = Node('1')
node2 = Node('2', parent=node1)
node3 = Node('3', parent=node2)
node4 = Node('4', parent=node1)
node5 = Node('5', parent=node3)
node6 = Node('6', parent=node3)
node7 = Node('7', parent=node3)
print(node1)
print(node7)
for pre, fill, node in RenderTree(node1):
    print('%s%s' % (pre, node.name))

//Example 12.4
newNode1 = Node('8')
newNode2 = Node('9', parent=newNode1)
newNode3 = Node('10', parent=newNode1)
newNode4 = Node('11', parent=newNode2)
print(RenderTree(newNode1))
newNode1.parent = node1
print(RenderTree(node1))

//Example 12.5
print(RenderTree(node3))

//Example 12.6
node2.parent = None
print(RenderTree(node2))
print(RenderTree(node1))

//Example 12.7
class Node():
    def __init__(self,val):
        self.val = val
        self.left = None
        self.right = None
    def add_left_child(self,node):
        self.left = node
    def add_right_child(self,node):
        self.right = node

//Example 12.8
root = Node(1)
root.val
root.add_left_child(Node(2))
root.left.val
root.add_right_child(Node(3))
root.right.val
root.add_right_child(Node(4))
root.right.val

//Example 12.9
pip install binarytree
from binarytree import Node
root = Node(3)
root.left = Node(6)
root.right = Node(8)
print(root)
list(root)
root.inorder
root.preorder
root.postorder
root.size
root.height
root.properties

//Example 12.10
from binarytree import build
tree_nodes = [1,2,3,4,5,None,6,7,8,None]
tree = build(tree_nodes)
print(tree)
tree.values
tree.size
tree.inorder

//Example 12.11
from binarytree import tree
root = tree()
print(root)
root = tree()
print(root)
root=tree(height=2)
print(root)
root=tree(height=2)
print(root)
root=tree(height=2,is_perfect=True)
print(root)
root=tree(height=2,is_perfect=True)
print(root)

//Example 12.12
class Node():
    def __init__(self,val):
        self.val = val
        self.left = None
        self.right = None
    def add_child(self,val):
        if(val<self.val):
            if(self.left is None):
                self.left = Node(val)
            else:
                self.left.add_child(val)
        else:
            if(self.right is None):
                self.right = Node(val)
            else:
                self.right.add_child(val)

//Example 12.13
root = Node(2)
root.val
root.add_child(1)
root.val
root.right
root.left
root.left.val
root.add_child(6)
root.right.val
root.add_child(0)
root.left.left.val
root.add_child(5)
root.right.left.val

//Example 12.14
from binarytree import bst
root = bst()
print(root)
root = bst(height=2)
print(root)
root = bst(height=2,is_perfect=True)
print(root)

//Answer 1
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
    def add_left_child(self,node):
        self.left = node
    def add_right_child(self,node):
        self.right = node
    def inorder(node):
        if node is None:
            return
        inorder(node.left)
        print(node.val, end=' ')
        inorder(node.right)

//Answer 2
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
    def add_left_child(self,node):
        self.left = node
    def add_right_child(self,node):
        self.right = node
    def findMinDepth(node):
        if node is None:
            return 0
        left = findMinDepth(node.left)
        right = findMinDepth(node.right)
        if node.left is None:
            return left + right
        if root.right is None:
            return left + 1
        return min(left, right) + 1
