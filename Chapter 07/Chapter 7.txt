//Example 7.1
empty_tuple= ()
empty_tuple
type(empty_tuple)
single_tuple = (1)
single_tuple
type(single_tuple)
single_tuple = (1,)
single_tuple
type(single_tuple)
test_tuple1 = (1, 'a', 3, 'test')
test_tuple1
type(test_tuple1)
single_tuple = 1,
single_tuple
type(single_tuple)
test_tuple = 1, 'a', 3, 'test'
test_tuple
type(test_tuple)

//Example 7.2
test_tuple=1,'a',3,'test',5
test_tuple
test_tuple[2]
test_tuple[-2]
test_tuple[6]
test_tuple[-6]
test_tuple[1:8]
test_tuple[-7:-2]
test_tuple[1:]
test_tuple[:]
test_tuple[:3]
test_tuple[:-2]
test_tuple[-4:]

//Note after Example 7.2
tuple = (1,2,3)
tuple[1] = 1
tuple = (1,[2,3],4)
tuple[1][0]=1
tuple

//Example 7.3
test_tuple=1,'a',3,'test',5
test_tuple
for val in test_tuple:
    print(val)

//Example 7.4
test_tuple=1,'a',3,'test',5
test_tuple
del test_tuple
test_tuple
del test_tuple

//Example 7.5
test_tuple=1,'a',3,'test',5
test_tuple
'a' in test_tuple
4 in test_tuple
test_tuple.index(3)
test_tuple.index('test')
test_tuple.index(4)
for i in range(0, len(test_tuple)):
    if test_tuple[i]==5:
        print(i)
		
//Example 7.6
test_tuple = 243, 45, 23, 67, 2, 78
test_tuple
sorted(test_tuple)
test_tuple
sorted(test_tuple, reverse = True)
test_tuple
test_tuple=1,'a',3,'test',5
test_tuple
sorted(test_tuple)

//Example 7.7
tuple1 = 1,2,3
tuple2 = 'a', 'b', 'c'
tuple1+tuple2
tuple2+tuple1

//Example 7.8
test_tuple = 1,2,3,4,3,2,3,1,2,4,5,2,3
test_tuple
test_tuple.count(1)
test_tuple.count(3)
test_tuple.count('a')
test_tuple.count(8)

//Example 7.9
test_tuple=1,'a',2,'b',3,'c'
test_tuple
reversed(test_tuple)
new_tuple=()
for x in reversed(test_tuple):
    new_tuple=new_tuple+(x,)

new_tuple
test_tuple
test_tuple[::-1]
test_tuple

//Example 7.10
test_tuple=1,'a',2,'b',3,'c'
test_tuple
from copy import deepcopy
new_tuple=deepcopy(test_tuple)
new_tuple
newtuple1=test_tuple
newtuple1

//Example 7.11
//Figure 7.6
test_tuple=1,2,3,4,5,6
test_tuple
[10*x for x in test_tuple]
test_tuple=1,'a',2,'b',3,'c'
[10*x for x in test_tuple]

//Figure 7.7
test_tuple=1,2,3,4,5,6
test_tuple
test_tuple*3
test_tuple=1,'a',2,'b',3,'c'
test_tuple
test_tuple*2

//Figure 7.8
test_tuple1=1,2,3,4,5,6
test_tuple2='a','b','c','d','e'
zip(test_tuple1,test_tuple2)
[zip(test_tuple1,test_tuple2)]
[x*y for x,y in zip(test_tuple1,test_tuple2)]
test_tuple2=5,4,3,2,1
test_tuple1
test_tuple2
[x*y for x,y in zip(test_tuple1,test_tuple2)]

//Figure 7.9
def add(x):
    return x+x

test_tuple=1,2,3,4,5,6
test_tuple
map(add,test_tuple)
from operator import mul
mul(4,5)

//Figure 7.10
test_tuple1=1,2,3,4,5
test_tuple2=5,4,3,2,1
from operator import mul
map(mul, test_tuple1, test_tuple2)
test_tuple2='a','b','c','d','e'
test_tuple1
map(mul, test_tuple1, test_tuple2)

//Example 7.12
test_tuple = 1,2,3,4,5,6,7
test_tuple
len(test_tuple)

//Example 7.13
test_tuple1 = 1,2,3
test_tuple2 = 1,2,3
test_tuple1 == test_tuple2
test_tuple2 = 2,1,1
test_tuple1 == test_tuple2
test_tuple1 > test_tuple2
test_tuple1 < test_tuple2
test_tuple2 = 1,2,3,4
test_tuple1 == test_tuple2
test_tuple1 > test_tuple2
test_tuple1 < test_tuple2
test_tuple2 = 'a','b','c'
test_tuple1 < test_tuple2
test_tuple1 == test_tuple2
test_tuple2 = 'a','b','c'
test_tuple1 == test_tuple2
test_tuple1 = 'a','b','cd'
test_tuple1 == test_tuple2
test_tuple1 < test_tuple2
test_tuple1 > test_tuple2
test_tuple1 = 'a','b','c','d'
test_tuple1 == test_tuple2
test_tuple1 < test_tuple2
test_tuple1 > test_tuple2
test_tuple1 = (1,2),2,3
test_tuple1
test_tuple2 = (2,1),2,3
test_tuple2
test_tuple1 > test_tuple2
test_tuple1 < test_tuple2

//Note after Example 7.13
test_tuple1 = 1,2,3
test_tuple2 = 2,3,4
all(x<y for x,y in zip(test_tuple1, test_tuple2))
test_tuple2 = 2,1,4
all(x<y for x,y in zip(test_tuple1, test_tuple2))

//Example 7.14
tuple = 1,2,3,4
max(tuple)
test_tuple = 1,2,3,4
max(test_tuple)
min(test_tuple)
test_tuple = 'a', 'b', 'c', 'd'
max(test_tuple)
min(test_tuple)
test_tuple = 'abc','bc','c'
max(test_tuple)
min(test_tuple)
test_tuple = (1,2), (2,3), (1,3)
max(test_tuple)
min(test_tuple)
test_tuple = 1, 'b', 3, 'd'
max(test_tuple)

//Example 7.15
test_tuple = (1,2,3)
str(test_tuple)

//Example 7.16
help(tuple)

//Example 7.17
(x,y,z) = (1,2,3)
x
z
(x,y,z) = range(3)
x
z
test_tuple = 1,2,3
test_tuple
x,y,z = test_tuple
x
z

//Example 7.18
x = 3
y = 6
(x,y) = (y,x)
x
y

//Answer 6
def elementAtIndex(test_tuple):  
    return(test_tuple[n])

n = 1
sorted([tuple1,tuple2,tuple3],key=elementAtIndex)

//Answer 7
from copy import deepcopy
new_tuple = deepcopy(test_tuple)

//Answer 8
test_tuple = 1, 2, 3, 4
2 in test_tuple

//Answer 9
test_tuple = (1, 2, {'x':'a', 'y': 'c'})
test_tuple[2]['y'] = 'b'

//Answer 10
test_tuple = 1, 2, 3, 4
test_list = [4, 3, 2, 1]
[x * y for x, y in zip(test_tuple, test_list)]

//Answer 11
test_tuple = 1, 1, 1, 1
all(x == test_tuple[0] for x in test_tuple)

//Answer 12
test_tuple = 1, 2, 3, 4
sum(test_tuple)/len(test_tuple)

//Answer 13
test_tuple = 1, 2, 3, 4
int(''.join(map(str,test_tuple)))
